// Code generated by protoc-gen-gin. DO NOT EDIT.
// versions:
// - protoc-gen-gin 0.1.0
// - protoc          0.0.0
// source: example.proto

package example

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

var _ = new(gin.Context)
var _ = new(http.Client)

// type myHandler {
//     ExampleService_GinClientHandlerImpl
//	   Log *slog.Logger
// }
//
// func NewMyHandler(log *slog.Logger) *myHandler {
// 	   return &myHandler{Log: log}
// }
//
// func main () {
//     e := gin.Default()
//     log := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{}))
//     handler := example.NewExampleService_GinServerHandler(NewMyHandler(log))
//     e.Get("/", e.handler.Hello)
//     if err := e.Start(":1111"); err != nil {
//         panic(err)
//     }
// }
//
// func (h myHandler) Hello(c *gin.Context, args *example.HelloRequest) (*example.HelloResponse, error) {
//     h.Log.Info("打印参数", slog.Any("args", args))
//     return &example.HelloResponse{Msg: args.Name}, nil
// }

type ExampleService_GinServerHandler interface {
	// Hello
	Hello(*gin.Context)
	// Say
	Say(*gin.Context)
}

type ExampleService_GinServerHandlerImpl struct {
	Handler ExampleService_GinClientHandler
}

func NewExampleService_GinServerHandler(handler ExampleService_GinClientHandler) ExampleService_GinServerHandler {
	return &ExampleService_GinServerHandlerImpl{
		Handler: handler,
	}
}

// Hello
// hello
func (s ExampleService_GinServerHandlerImpl) Hello(c *gin.Context) {
	var args HelloRequest
	if err := c.Bind(&args); err != nil {
		c.JSON(http.StatusOK, gin.H{"code": 400, "msg": err.Error()})
		return
	}

	resp, err := s.Handler.Hello(c, &args)
	if err != nil {
		c.JSON(http.StatusOK, gin.H{"code": 500, "msg": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"code": 0, "data": resp})
}

// Say
// Say ......
// Say godoc
// @Summary Say
// @Description say some thing
// @Tags      say
// @Accept    json
// @Produce   json
// @Param     args  SayRequest
// @Success   200   {array}   SayResponse
// @Failure   400   {object}  httputil.HTTPError
// @Failure   404   {object}  httputil.HTTPError
// @Failure   500   {object}  httputil.HTTPError
// @Router    /say  [get]
// 说点什么
func (s ExampleService_GinServerHandlerImpl) Say(c *gin.Context) {
	var args SayRequest
	if err := c.ShouldBindUri(&args); err != nil {
		c.JSON(http.StatusOK, gin.H{"code": 400, "msg": err.Error()})
		return
	}

	resp, err := s.Handler.Say(c, &args)
	if err != nil {
		c.JSON(http.StatusOK, gin.H{"code": 500, "msg": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"code": 0, "data": resp})
}

type ExampleService_GinClientHandler interface {
	// Hello
	Hello(*gin.Context, *HelloRequest) (*HelloResponse, error)
	// Say
	Say(*gin.Context, *SayRequest) (*SayResponse, error)
}

// 下面方法仅供参考, 具体需要自己实现

type ExampleService_GinClientHandlerImpl struct {
}

func NewExampleService_GinClientHandler() ExampleService_GinClientHandler {
	return &ExampleService_GinClientHandlerImpl{}
}

// Hello
func (ExampleService_GinClientHandlerImpl) Hello(c *gin.Context, args *HelloRequest) (*HelloResponse, error) {
	return &HelloResponse{}, nil
}

// Say
func (ExampleService_GinClientHandlerImpl) Say(c *gin.Context, args *SayRequest) (*SayResponse, error) {
	return &SayResponse{}, nil
}
